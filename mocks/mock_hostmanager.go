// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rusq/vhoster/apiserver (interfaces: HostManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vhoster "github.com/rusq/vhoster"
)

// MockHostManager is a mock of HostManager interface.
type MockHostManager struct {
	ctrl     *gomock.Controller
	recorder *MockHostManagerMockRecorder
}

// MockHostManagerMockRecorder is the mock recorder for MockHostManager.
type MockHostManagerMockRecorder struct {
	mock *MockHostManager
}

// NewMockHostManager creates a new mock instance.
func NewMockHostManager(ctrl *gomock.Controller) *MockHostManager {
	mock := &MockHostManager{ctrl: ctrl}
	mock.recorder = &MockHostManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostManager) EXPECT() *MockHostManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockHostManager) Add(arg0 string, arg1 *url.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockHostManagerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockHostManager)(nil).Add), arg0, arg1)
}

// List mocks base method.
func (m *MockHostManager) List() []vhoster.Host {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]vhoster.Host)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockHostManagerMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockHostManager)(nil).List))
}

// Remove mocks base method.
func (m *MockHostManager) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockHostManagerMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockHostManager)(nil).Remove), arg0)
}

// Replace mocks base method.
func (m *MockHostManager) Replace(arg0 string, arg1 *url.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replace indicates an expected call of Replace.
func (mr *MockHostManagerMockRecorder) Replace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockHostManager)(nil).Replace), arg0, arg1)
}
